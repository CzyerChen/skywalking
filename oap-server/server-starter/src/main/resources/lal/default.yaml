# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The default LAL script to save all logs, behaving like the versions before 8.5.0.
#rules:
#  - name: default
#    layer: GENERAL
#    dsl: |
#      filter {
#        sink {
#        }
#      }
rules:
  - name: log_count_rule
    layer: GENERAL
    dsl: |
      filter {
        text {
          abortOnFailure true
          dotAll false
          regexp $/(?s)(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}) \[TID:(?<tid>.+?)] \[(?<thread>.+?)] (?<level>\w{4,}) (?<logger>.{1,36}) (?<msg>.+)/$
        }
        extractor {
          metrics {
            timestamp log.timestamp as Long
            labels level: parsed.level, service: log.service, instance: log.serviceInstance, timestamp: log.timestamp
            name "log_count"
            value 1
          }
        }
        sink {
          if (parsed.level == "INFO") {
            enforcer { }
          }
          if (parsed.level == "ERROR") {
            enforcer { }
          }
          if (parsed.level == "WARN") {
            enforcer { }
          }
        }
      }
  - name: log_exception_rule
    layer: GENERAL
    dsl: |
      filter {
        text {
          abortOnFailure true
          dotAll true
          regexp $/(?s)(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}) \[TID:(?<tid>.+?)] \[(?<thread>.+?)] (?<level>\w{4,}) (?<logger>.{1,36}) (?<msg>.+)(?<exception>(?:.*?)(?<=\.)\w+Exception(?=:)?\s*([\s\S]*?)?) (?<stacktrace>.+)/$
        }
        extractor {
          metrics {
            timestamp log.timestamp as Long
            labels level: parsed.level, exception: parsed.exception, service: log.service, instance: log.serviceInstance, timestamp: log.timestamp
            name "log_exception"
            value 1
          }
        }
        sink {
        }
      }